#!/usr/bin/env bash

# From https://unix.stackexchange.com/a/432145
# Return the maximum of one or more integer arguments
max() {
    local max number

    max="$1"

    for number in "${@:2}"; do
        if ((number > max)); then
        max="$number"
        fi
    done

    printf '%d\n' "$max"
}

echo '----- ulimits -----'
ulimit -a
echo '-------------------'
echo

# Don't use errexit, so coverage report is still generated when tests fail
set -o pipefail

NOCOVERAGE="${NOCOVERAGE:-}"
NOCOVERAGE_ERASE="${NOCOVERAGE_ERASE:-$NOCOVERAGE}"
NOCOVERAGE_REPORT="${NOCOVERAGE_REPORT:-$NOCOVERAGE}"

# Need to align the test runner with the test library that is imported. Or
# unittest treats unittest2.skipTest() as a test failure & vice versa.
# https://github.com/testing-cabal/testtools/issues/272#issuecomment-522645715
# Bash considers 0 exit status truthy, so the below test looks a bit backwards
if python -c "import sys;sys.exit(int(sys.version_info[:2] < (3, 5)))"; then
    if [ ! "$NOCOVERAGE" ]; then
        discover_cmd="coverage run --append -m unittest discover"
    else
        discover_cmd="python -m unittest discover"
    fi
else
    UNIT2="${UNIT2:-$(command -v unit2)}"
    if [ ! "$NOCOVERAGE" ]; then
        discover_cmd="coverage run --append $UNIT2 discover"
    else
        discover_cmd="$UNIT2 discover"
    fi
fi

if [ ! "$NOCOVERAGE_ERASE" ]; then
    coverage erase
fi

# First run overwites coverage output.
[ "$SKIP_MITOGEN" ] || {
    $discover_cmd \
            --start-directory "tests" \
            --pattern '*_test.py' \
            "$@"
    MITOGEN_TEST_STATUS=$?
}

# Second run appends. This is since 'discover' treats subdirs as packages and
# the 'ansible' subdir shadows the real Ansible package when it contains
# __init__.py, so hack around it by just running again with 'ansible' as the
# start directory. Alternative seems to be renaming tests/ansible/ and making a
# mess of Git history.
[ "$SKIP_ANSIBLE" ] || {
    export PYTHONPATH=`pwd`/tests:$PYTHONPATH
    $discover_cmd \
            --start-directory "tests/ansible" \
            --pattern '*_test.py' \
            "$@"
    ANSIBLE_TEST_STATUS=$?
}

if [ ! "$NOCOVERAGE_REPORT" ]; then
    coverage html
    echo "coverage report is at file://$(pwd)/htmlcov/index.html"
fi

# Exit with a non-zero status if any test run did so
exit "$(max $MITOGEN_TEST_STATUS $ANSIBLE_TEST_STATUS)"
