from typing import Any, Optional, Text, Tuple

#from ansible.errors.yaml_strings import ( YAML_POSITION_DETAILS,
#        YAML_COMMON_UNQUOTED_VARIABLE_ERROR,
#        YAML_COMMON_DICT_ERROR,
#        YAML_COMMON_UNQUOTED_COLON_ERROR,
#        YAML_COMMON_PARTIALLY_QUOTED_LINE_ERROR,
#        YAML_COMMON_UNBALANCED_QUOTES_ERROR,
#        YAML_COMMON_LEADING_TAB_ERROR)
#from ansible.module_utils._text import to_native, to_text


class AnsibleError(Exception):
    def __init__(self,
            message : str=...,
            obj: Optional[Any] = ...,
            show_content: bool = ...,
            suppress_extended_error: bool = ...
    ) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def _get_error_lines_from_file(self, file_name: Text, line_number: int) -> Tuple[Text, Text]: ...
    def _get_extended_error(self) -> Text: ...

class AnsibleOptionsError(AnsibleError): ...

class AnsibleParserError(AnsibleError): ...

class AnsibleInternalError(AnsibleError): ...

class AnsibleRuntimeError(AnsibleError): ...

class AnsibleModuleError(AnsibleRuntimeError): ...

class AnsibleConnectionFailure(AnsibleRuntimeError): ...

class AnsibleFilterError(AnsibleRuntimeError): ...

class AnsibleLookupError(AnsibleRuntimeError): ...

class AnsibleCallbackError(AnsibleRuntimeError): ...

class AnsibleUndefinedVariable(AnsibleRuntimeError): ...

class AnsibleFileNotFound(AnsibleRuntimeError): ...

class AnsibleModuleExit(Exception):
    result = ... # type: Any
    def __init__(self, result: Any) -> None: ...

class AnsibleActionSkip(AnsibleRuntimeError): ...

class AnsibleActionFail(AnsibleRuntimeError): ...
