from typing import Any, Iterable, List, Optional, Text, Tuple


MODULE_CACHE = {} # type: dict
PATH_CACHE = {} # type: dict
PLUGIN_PATH_CACHE = {} # type: dict


def get_all_plugin_loaders() -> List[PluginLoader]: ...

class PluginLoader:
    def __init__(self, class_name: str, package: str, config: str, subdir: str, aliases: dict =..., required_base_class: Any = ...) -> None: ...
    def __setstate__(self, data: dict) -> None: ...
    def __getstate__(self) -> dict: ...
    def format_paths(self, paths: Iterable[str] ) -> str: ...
    def print_paths(self) -> str: ...
    def _all_directories(self, dir: str) -> List[str]: ...
    def _get_package_paths(self, subdirs: bool = ...) -> List[str]: ...
    def _get_paths(self, subdirs: bool = ...) -> List[str]: ...
    def add_directory(self, directory: str, with_subdir: bool = ...) -> None: ...
    def find_plugin(self, name: str, mod_type: str = ..., ignore_deprecated: bool = ...) -> Optional[Any]: ...
    def has_plugin(self, name: str) -> bool: ...
    def __contains__(self, name: str) -> bool: ...
    def _load_module_source(self, name: str, path: str) -> Any: ...
    def get(self, name: str, *args: object, **kwargs: object) -> object: ...
    def _display_plugin_load(self, class_name: str, name: str, searched_paths: List[str], path: str, found_in_cache: Optional[bool] = ..., class_only: Optional[bool] = ...) -> None: ...
    def all(self, *args: object, **kwargs: object) -> Iterable[object]: ...

action_loader = ... # type: PluginLoader
cache_loader = ... # type: PluginLoader
callback_loader = ... # type: PluginLoader
connection_loader = ... # type: PluginLoader
shell_loader = ... # type: PluginLoader
module_loader = ... # type: PluginLoader
